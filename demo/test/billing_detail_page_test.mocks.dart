// Mocks generated by Mockito 5.4.2 from annotations
// in demo/test/billing_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i4;

import 'package:demo/model/billing.dart' as _i2;
import 'package:demo/provider/billing_provider.dart' as _i3;
import 'package:demo/repository/billing_repository.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBilling_0 extends _i1.SmartFake implements _i2.Billing {
  _FakeBilling_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BillingProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockBillingProvider extends _i1.Mock implements _i3.BillingProvider {
  @override
  List<_i2.Billing> get billings => (super.noSuchMethod(
        Invocation.getter(#billings),
        returnValue: <_i2.Billing>[],
        returnValueForMissingStub: <_i2.Billing>[],
      ) as List<_i2.Billing>);

  @override
  List<_i2.Billing> get searchResult => (super.noSuchMethod(
        Invocation.getter(#searchResult),
        returnValue: <_i2.Billing>[],
        returnValueForMissingStub: <_i2.Billing>[],
      ) as List<_i2.Billing>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setBillings(List<_i2.Billing>? newBillings) => super.noSuchMethod(
        Invocation.method(
          #setBillings,
          [newBillings],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeBilling(int? id) => super.noSuchMethod(
        Invocation.method(
          #removeBilling,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateBilling(_i2.Billing? billing) => super.noSuchMethod(
        Invocation.method(
          #updateBilling,
          [billing],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addBilling(_i2.Billing? billing) => super.noSuchMethod(
        Invocation.method(
          #addBilling,
          [billing],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void searchByDescription(String? text) => super.noSuchMethod(
        Invocation.method(
          #searchByDescription,
          [text],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void searchByType(_i2.BillingType? type) => super.noSuchMethod(
        Invocation.method(
          #searchByType,
          [type],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void searchByKind(_i2.BillingKind? kind) => super.noSuchMethod(
        Invocation.method(
          #searchByKind,
          [kind],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void searchByDateRange(
    DateTime? start,
    DateTime? end,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #searchByDateRange,
          [
            start,
            end,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearSearch() => super.noSuchMethod(
        Invocation.method(
          #clearSearch,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BillingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBillingRepository extends _i1.Mock implements _i5.BillingRepository {
  @override
  _i6.Future<int> insertBilling(_i2.Billing? billing) => (super.noSuchMethod(
        Invocation.method(
          #insertBilling,
          [billing],
        ),
        returnValue: _i6.Future<int>.value(0),
        returnValueForMissingStub: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<void> batchInsertBilling(List<_i2.Billing>? billings) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchInsertBilling,
          [billings],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteBilling(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBilling,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<int> clearBilling() => (super.noSuchMethod(
        Invocation.method(
          #clearBilling,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
        returnValueForMissingStub: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<_i2.Billing> updateBilling(_i2.Billing? billing) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBilling,
          [billing],
        ),
        returnValue: _i6.Future<_i2.Billing>.value(_FakeBilling_0(
          this,
          Invocation.method(
            #updateBilling,
            [billing],
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i2.Billing>.value(_FakeBilling_0(
          this,
          Invocation.method(
            #updateBilling,
            [billing],
          ),
        )),
      ) as _i6.Future<_i2.Billing>);

  @override
  _i6.Future<_i2.Billing> billing(int? id) => (super.noSuchMethod(
        Invocation.method(
          #billing,
          [id],
        ),
        returnValue: _i6.Future<_i2.Billing>.value(_FakeBilling_0(
          this,
          Invocation.method(
            #billing,
            [id],
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i2.Billing>.value(_FakeBilling_0(
          this,
          Invocation.method(
            #billing,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Billing>);

  @override
  _i6.Future<List<_i2.Billing>> billings() => (super.noSuchMethod(
        Invocation.method(
          #billings,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Billing>>.value(<_i2.Billing>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i2.Billing>>.value(<_i2.Billing>[]),
      ) as _i6.Future<List<_i2.Billing>>);
}
